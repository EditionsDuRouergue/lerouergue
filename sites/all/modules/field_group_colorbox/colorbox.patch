diff --git a/css/field_group_colorbox.base.css b/css/field_group_colorbox.base.css
index b89b1d2..dddb288 100644
--- a/css/field_group_colorbox.base.css
+++ b/css/field_group_colorbox.base.css
@@ -1,4 +1,4 @@
-.field-group-colorbox-wrapper {
+.field-group-colorbox {
   display: none;
 }
 .field-group-colorbox-trigger {
diff --git a/field_group_colorbox.info b/field_group_colorbox.info
index e1c48d9..e959d6e 100644
--- a/field_group_colorbox.info
+++ b/field_group_colorbox.info
@@ -2,5 +2,5 @@ name = Fieldgroup Colorbox
 description = Provide a type of fieldgroup that appears in a colorbox.
 package = Fields
 dependencies[] = field_group
-dependencies[] = colorbox
+dependencies[] = libraries (2.x)
 core = 7.x
diff --git a/field_group_colorbox.install b/field_group_colorbox.install
index a00eedf..2a0f7dd 100644
--- a/field_group_colorbox.install
+++ b/field_group_colorbox.install
@@ -5,13 +5,43 @@
  */
 
 /**
- * Implements hook_enable().
+ * Implements hook_requirements().
+ *
+ * This code stolen mostly verbatim from the Colorbox module, so that we don't
+ * clutter up the status page. (and to save me some work!)
  */
-function field_group_colorbox_enable() {
-  $inline = variable_get('colorbox_inline', FALSE);
-  if (!$inline) {
-    $msg = t("Field Group Colorbox will not function until you check 'Enable colorbox inline' !url.", array('!url' => l(t('here'), 'admin/config/media/colorbox')));
-    $type = 'error';
-    drupal_set_message($msg, $type);
+function field_group_colorbox_requirements($phase) {
+  $requirements = array();
+  $minimum_version = '1.3.21.1';
+
+  if ($phase == 'runtime') {
+    $t = get_t();
+    $library = libraries_detect('colorbox');
+
+    if (empty($library['installed'])) {
+      $requirements['colorbox_plugin'] = array(
+        'title' => $t('Colorbox plugin'),
+        'value' => $t('At least @a', array('@a' => $minimum_version)),
+        'severity' => REQUIREMENT_ERROR,
+        'description' => $t('You need to download the !colorbox, extract the archive and place the colorbox directory in the %path directory on your server.', array('!colorbox' => l($t('Colorbox plugin'), $library['download url']), '%path' => 'sites/all/libraries')),
+      );
+    }
+    elseif (version_compare($library['version'], $minimum_version, '>=')) {
+      $requirements['colorbox_plugin'] = array(
+        'title' => $t('Colorbox plugin'),
+        'severity' => REQUIREMENT_OK,
+        'value' => $library['version'],
+      );
+    }
+    else {
+      $requirements['colorbox_plugin'] = array(
+        'title' => $t('Colorbox plugin'),
+        'value' => $t('At least @a', array('@a' => $minimum_version)),
+        'severity' => REQUIREMENT_ERROR,
+        'description' => $t('You need to download a later version of the !colorbox and replace the old version located in the %path directory on your server.', array('!colorbox' => l($t('Colorbox plugin'), $library['download url']), '%path' => $library['library path'])),
+      );
+    }
   }
+
+  return $requirements;
 }
diff --git a/field_group_colorbox.module b/field_group_colorbox.module
index 7600401..2b64005 100644
--- a/field_group_colorbox.module
+++ b/field_group_colorbox.module
@@ -5,26 +5,8 @@
  */
 
 define('FIELD_GROUP_COLORBOX_PAIR_ID', 'fieldgroup-colorbox-pair-id');
-define('FIELD_GROUP_COLORBOX_GALLERY_TYPE', 'page');
-
-/**
- * Implements hook_theme().
- */
-function field_group_colorbox_theme() {
-  return array(
-    'field_group_colorbox_trigger' => array(
-      'variables' => array(
-        'pair_id' => NULL,
-        'gallery' => NULL,
-      ),
-    ),
-    'field_group_colorbox_popup' => array(
-      'variables' => array(
-        'pair_id' => NULL,
-      ),
-    ),
-  );
-}
+define('FIELD_GROUP_COLORBOX_TYPE_TRIGGER', 'colorbox_trigger');
+define('FIELD_GROUP_COLORBOX_TYPE_POPUP', 'colorbox_popup');
 
 /**
  * Implements hook_field_group_formatter_info().
@@ -32,20 +14,20 @@ function field_group_colorbox_theme() {
 function field_group_colorbox_field_group_formatter_info() {
   return array(
     'display' => array(
-      'colorbox_trigger' => array(
+      FIELD_GROUP_COLORBOX_TYPE_TRIGGER => array(
         'label' => t('Colorbox Trigger'),
         'description' => t('This fieldgroup renders a trigger for a colorbox popup.'),
         'instance_settings' => array(
           'pair_id' => FIELD_GROUP_COLORBOX_PAIR_ID,
-          'gallery' => FIELD_GROUP_COLORBOX_GALLERY_TYPE,
-          'gallery_custom' => '',
+          'grouping_by_entity' => FALSE,
         ),
       ),
-      'colorbox_popup' => array(
+      FIELD_GROUP_COLORBOX_TYPE_POPUP => array(
         'label' => t('Colorbox Popup'),
         'description' => t('This fieldgroup renders a colorbox popup.'),
         'instance_settings' => array(
           'pair_id' => FIELD_GROUP_COLORBOX_PAIR_ID,
+          'multiple_popups' => FALSE,
         ),
       ),
     ),
@@ -56,6 +38,13 @@ function field_group_colorbox_field_group_formatter_info() {
  * Implements hook_field_group_format_settings().
  */
 function field_group_colorbox_field_group_format_settings($group) {
+
+  $is_trigger = ($group->format_type == FIELD_GROUP_COLORBOX_TYPE_TRIGGER);
+  $is_popup = ($group->format_type == FIELD_GROUP_COLORBOX_TYPE_POPUP);
+  if (!$is_trigger && !$is_popup) {
+    return;
+  }
+
   // Add a wrapper for extra settings to use by others.
   $form = array(
     'instance_settings' => array(
@@ -67,76 +56,60 @@ function field_group_colorbox_field_group_format_settings($group) {
   $field_group_types = field_group_formatter_info();
   $mode = $group->mode == 'form' ? 'form' : 'display';
   $formatter = $field_group_types[$mode][$group->format_type];
-  $settings = $group->format_settings['instance_settings'];
+  $global_config = $formatter['instance_settings'];
+  $local_config = $group->format_settings['instance_settings'];
 
-  $pair_id = '';
-  if (isset($formatter['instance_settings']['pair_id'])) {
-    $pair_id = $formatter['instance_settings']['pair_id'];
+  // Pair ID should appear on both the trigger and the popup.
+  if (isset($local_config['pair_id'])) {
+    $existing_value = $local_config['pair_id'];
   }
-  if (isset($settings['pair_id'])) {
-    $pair_id = $settings['pair_id'];
+  else {
+    $existing_value = $global_config['pair_id'];
   }
+  $form['instance_settings']['pair_id'] = array(
+    '#title' => t('Pair ID.'),
+    '#type' => 'machine_name',
+    '#maxlength' => 32,
+    '#default_value' => $existing_value,
+    '#description' => t('Required: Colorbox triggers will trigger popups that share the same "pair ID".'),
+    '#required' => TRUE,
+    '#machine_name' => array(
+      'exists' => 'field_group_colorbox_fake_exists',
+      'error' => t('The pair ID field must only contain lowercase letters, numbers, dashes, and underscores.'),
+      'replace_pattern' => '[^a-z0-9_-]+',
+    ),
+  );
 
-  if ($group->format_type == 'colorbox_trigger' ||
-      $group->format_type == 'colorbox_popup') {
-    $form['instance_settings']['pair_id'] = array(
-      '#title' => t('Trigger -> Popup pair ID.'),
-      '#type' => 'machine_name',
-      '#maxlength' => 32,
-      '#default_value' => $pair_id,
-      '#description' => t('Colorbox triggers will trigger popups that share the same "pair ID". It must only contain lowercase letters, numbers, dashes, and underscores.'),
-      '#required' => FALSE,
-      '#machine_name' => array(
-        'exists' => 'field_group_colorbox_fake_exists',
-        'error' => t('The pair ID field must only contain lowercase letters, numbers, dashes, and underscores.'),
-        'replace_pattern' => '[^a-z0-9_-]+',
-      ),
+  if ($is_popup) {
+    // Multiple Popups checkbox should appear on only the popup.
+    if (isset($local_config['multiple_popups'])) {
+      $existing_value = $local_config['multiple_popups'];
+    }
+    else {
+      $existing_value = $global_config['multiple_popups'];
+    }
+    $form['instance_settings']['multiple_popups'] = array(
+      '#title' => t('Multi-value fields appear as separate popups'),
+      '#type' => 'checkbox',
+      '#default_value' => $existing_value,
     );
   }
 
-  if ($group->format_type == 'colorbox_trigger') {
-    $gallery_options = array(
-      'post' => t('Per post gallery'),
-      'page' => t('Per page gallery'),
-      'field_post' => t('Per field in post gallery'),
-      'field_page' => t('Per field in page gallery'),
-      'custom' => t('Custom'),
-      'none' => t('No gallery'),
-    );
-    $gallery = $formatter['instance_settings']['gallery'];
-    if (isset($settings['gallery'])) {
-      $gallery = $settings['gallery'];
+  if ($is_trigger) {
+    // The group-by-entity checkbox only appears on the trigger group.
+    if (isset($local_config['grouping_by_entity'])) {
+      $existing_value = $local_config['grouping_by_entity'];
     }
-    $form['instance_settings']['gallery'] = array(
-      '#title' => t('Gallery (popup grouping)'),
-      '#type' => 'select',
-      '#default_value' => $gallery,
-      '#options' => $gallery_options,
-      '#description' => t('How Colorbox should group the popup galleries.'),
-    );
-
-    $gallery_custom = $formatter['instance_settings']['gallery_custom'];
-    if (isset($settings['gallery_custom'])) {
-      $gallery_custom = $settings['gallery_custom'];
+    else {
+      $existing_value = $global_config['grouping_by_entity'];
     }
-    $form['instance_settings']['gallery_custom'] = array(
-      '#title' => t('Custom gallery'),
-      '#type' => 'machine_name',
-      '#maxlength' => 32,
-      '#default_value' => $gallery_custom,
-      '#description' => t('All popups on a page with the same gallery value (rel attribute) will be grouped together. It must only contain lowercase letters, numbers, dashes, and underscores.'),
-      '#required' => FALSE,
-      '#machine_name' => array(
-        'exists' => 'field_group_colorbox_fake_exists',
-        'error' => t('The custom gallery field must only contain lowercase letters, numbers, dashes, and underscores.'),
-      ),
-      '#states' => array(
-        'visible' => array(
-          ':input[name$="[format_settings][settings][instance_settings][gallery]"]' => array('value' => 'custom'),
-        ),
-      ),
+    $form['instance_settings']['grouping_by_entity'] = array(
+      '#title' => t('Each entity on the page gets its own colorbox grouping'),
+      '#type' => 'checkbox',
+      '#default_value' => $existing_value,
     );
   }
+
   return $form;
 }
 
@@ -159,6 +132,8 @@ function _field_group_colorbox_get_entity_type($form) {
 
 /**
  * Helper function to get an entity's id from a $form variable.
+ *
+ * TODO: Need a more future-proof way of doing this.
  */
 function _field_group_colorbox_get_entity_id($form) {
   $entity_type = _field_group_colorbox_get_entity_type($form);
@@ -170,7 +145,11 @@ function _field_group_colorbox_get_entity_id($form) {
       // that "identifies" the identifier. Now we have to try to
       // dig up an entity.
       $entity = FALSE;
-      if (isset($form['#groups'])) {
+      // Check for the most common case.
+      if (isset($form['#' . $entity_type])) {
+        $entity = $form['#' . $entity_type];
+      }
+      elseif (isset($form['#groups'])) {
         foreach (array_keys($form['#groups']) as $group_name) {
           if ($entity) {
             break;
@@ -182,9 +161,9 @@ function _field_group_colorbox_get_entity_id($form) {
             }
           }
         }
-        if (is_object($entity) && isset($entity->{$entity_type_id})) {
-          return $entity->$entity_type_id;
-        }
+      }
+      if (is_object($entity) && isset($entity->{$entity_type_id})) {
+        return $entity->$entity_type_id;
       }
     }
   }
@@ -195,74 +174,88 @@ function _field_group_colorbox_get_entity_id($form) {
  * Implements hook_field_group_pre_render().
  */
 function field_group_colorbox_field_group_pre_render(&$element, $group, &$form) {
-  if ($group->format_type != 'colorbox_trigger' &&
-      $group->format_type != 'colorbox_popup') {
+  if ($group->format_type != FIELD_GROUP_COLORBOX_TYPE_TRIGGER &&
+      $group->format_type != FIELD_GROUP_COLORBOX_TYPE_POPUP) {
     return;
   }
+
+  $is_trigger = ($group->format_type == FIELD_GROUP_COLORBOX_TYPE_TRIGGER);
+  $is_popup = ($group->format_type == FIELD_GROUP_COLORBOX_TYPE_POPUP);
+
+  // Common variables to both triggers and popups.
   $settings = $group->format_settings['instance_settings'];
   $pair_id = FIELD_GROUP_COLORBOX_PAIR_ID;
   if (isset($settings['pair_id'])) {
     $pair_id = $settings['pair_id'];
   }
-  // This bit of weirdness is so we can keep track of how many
-  // of these fieldgroup pairs have already appeared on the page.
-  $static_var_name = 'field_group_colorbox_' . $pair_id;
-  $delta = &drupal_static($static_var_name);
-  // In some cases, an entity may be rendered individually and cached
-  // indefinitely, so we will start off with a random number to reduce
-  // the chances of a collision.
-  if (!isset($delta)) {
-    $delta = rand();
+  $entity_type = _field_group_colorbox_get_entity_type($form);
+  $entity_id = $entity_type . '-' . _field_group_colorbox_get_entity_id($form);
+  $common_classes = $pair_id . ' ' . $entity_id;
+
+  // Render the trigger.
+  if ($is_trigger) {
+
+    $group_by_entity = (!empty($settings['grouping_by_entity']));
+
+    $classes = 'field-group-colorbox-trigger ' . $common_classes;
+    $element['#prefix'] = '<a href="#" class="' . $classes . '">';
+    $element['#suffix'] = '</a>';
+    // Strip links from the trigger, since links within links cause
+    // unpredictable browser and rendering behavior.
+    $element['#post_render'][] = '_field_group_colorbox_strip_links';
+    // Add our javascript
+    $grouping = ($group_by_entity) ? $entity_id : 'page';
+    $element['#attached']['js'][] = array(
+      'data' => array(
+        'field_group_colorbox' => array(
+          $pair_id => array($grouping),
+        ),
+      ),
+      'type' => 'setting',
+    );
+    $path = drupal_get_path('module', 'field_group_colorbox');
+    $element['#attached']['js'][] = $path . '/js/field_group_colorbox.js';
   }
-  $current_pair_id = $pair_id . '-' . floor($delta);
-  // The static variable won't fully increment until both members
-  // of the pair have been rendered.
-  $delta += 0.5;
-  if ($group->format_type == 'colorbox_trigger') {
-    $gallery = '';
-    $gallery_type = FIELD_GROUP_COLORBOX_GALLERY_TYPE;
-    if (isset($settings['gallery'])) {
-      $gallery_type = $settings['gallery'];
-    }
-    // For the "post" galleries, we need to go to extraordinary lengths
-    // to get the entity id.
-    if ($gallery_type == 'post' || $gallery_type == 'field_post') {
-      $entity_type = _field_group_colorbox_get_entity_type($form);
-      $entity_id = _field_group_colorbox_get_entity_id($form);
-      if ($entity_type && $entity_id) {
-        $gallery = 'colorbox-gallery-' . $entity_type . '-' . $entity_id;
+
+  // Or render the popup.
+  elseif ($is_popup) {
+
+    $classes = 'field-group-colorbox ' . $common_classes;
+    $prefix = '<div class="' . $classes . '" hidden>';
+    $suffix = '</div>';
+
+    // Check to see if we need to separate multi-value fields into
+    // separate popups.
+    $multiple_value_children = array();
+    if (!empty($settings['multiple_popups'])) {
+      foreach ($element as $child_name => $child) {
+        if (!empty($child['#items']) && count($child['#items'] > 1)) {
+          $multiple_value_children[] = $child_name;
+        }
       }
     }
-    // For the "page" galleries we just need the current path.
-    elseif ($gallery_type == 'page' || $gallery_type == 'field_page') {
-      $gallery = 'colorbox-gallery-' . str_replace('/', '-', current_path());
-    }
-    // For the custom galleries just use them as indicated.
-    elseif ($gallery_type == 'custom' && isset($settings['gallery_custom'])) {
-      $gallery = $settings['gallery_custom'];
+
+    // If we need to separate multi-value fields, we'll hide the whole
+    // element, and then put our colorbox wrappers around each individual
+    // value.
+    if (!empty($multiple_value_children)) {
+      foreach ($multiple_value_children as $child) {
+        foreach ($element[$child]['#items'] as $index => $item) {
+          if (!empty($element[$child][$index])) {
+            $element[$child][$index]['#prefix'] = $prefix;
+            $element[$child][$index]['#suffix'] = $suffix;
+          }
+        }
+      }
+
+      $element['#prefix'] = '<div style="display:none;">';
+      $element['#suffix'] = '</div>';
     }
-    // For the "field" galleries we add our unique "pair id".
-    if ($gallery_type == 'field_post' || $gallery_type == 'field_page') {
-      $gallery .= '-' . $pair_id;
+    // Otherwise wrap the whole element as normal.
+    else {
+      $element['#prefix'] = $prefix;
+      $element['#suffix'] = $suffix;
     }
-    // Finally render the trigger.
-    $trigger = theme('field_group_colorbox_trigger', array(
-      'pair_id' => $current_pair_id,
-      'gallery' => $gallery,
-    ));
-    $element['#prefix'] = $trigger['prefix'];
-    $element['#suffix'] = $trigger['suffix'];
-    // Strip links from the trigger, since links within links cause
-    // unpredictable browser and rendering behavior.
-    $element['#post_render'][] = '_field_group_colorbox_strip_links';
-  }
-  // Render the popup.
-  if ($group->format_type == 'colorbox_popup') {
-    $popup = theme('field_group_colorbox_popup', array(
-      'pair_id' => $current_pair_id,
-    ));
-    $element['#prefix'] = $popup['prefix'];
-    $element['#suffix'] = $popup['suffix'];
     // Add our CSS
     $path = drupal_get_path('module', 'field_group_colorbox') . '/css/';
     $element['#attached']['css'][] = $path . 'field_group_colorbox.base.css';
@@ -279,33 +272,3 @@ function field_group_colorbox_field_group_pre_render(&$element, $group, &$form)
 function _field_group_colorbox_strip_links($markup, $element) {
   return preg_replace("/<\\/?a(\\s+.*?>|>)/", "", $markup);
 }
-
-/**
- * Theme function for trigger - should return prefix and suffix.
- */
-function theme_field_group_colorbox_trigger($vars) {
-  $href = 'href="?inline=true#' . $vars['pair_id'] . '"';
-  $rel = ($vars['gallery']) ? ' rel="' . $vars['gallery'] . '"' : '';
-  $classes = 'field-group-colorbox-trigger colorbox-inline';
-  return array(
-    'prefix' => '<a class="' . $classes . '" ' . $href . $rel . '>',
-    'suffix' => '</a>',
-  );
-}
-
-/**
- * Theme function for popup - should return prefix and suffix.
- */
-function theme_field_group_colorbox_popup($vars) {
-  // Add a wrapper and basic classes/ids for the popup itself. We'll use
-  // the HTML5 hidden attribute to hide the wrapper completely. that way,
-  // the content will not display here, but will still be visible when
-  // Colorbox yanks out of the markup. For old browser we'll also include
-  // a CSS file.
-  $wrapper = '<div class="field-group-colorbox-wrapper" hidden>';
-  $popup = '<div class="field-group-colorbox" id="' . $vars['pair_id'] . '">';
-  return array(
-    'prefix' => $wrapper . $popup,
-    'suffix' => '</div></div>',
-  );
-}
diff --git a/js/field_group_colorbox.js b/js/field_group_colorbox.js
new file mode 100644
index 0000000..c228058
--- /dev/null
+++ b/js/field_group_colorbox.js
@@ -0,0 +1,48 @@
+(function($, Drupal){
+  Drupal.behaviors.field_group_colorbox = {
+    attach: function(context, settings) {
+      if (settings.field_group_colorbox !== undefined) {
+
+        var trigger_selector = '.field-group-colorbox-trigger';
+        var popup_selector = '.field-group-colorbox';
+        for (var pair_id in settings.field_group_colorbox) {
+          for (var entity_id in settings.field_group_colorbox[pair_id]) {
+            var pair_selector = pair_id;
+            // If the trigger is set to "group by entity", add the entity id
+            // to our pair selector.
+            if (settings.field_group_colorbox[pair_id][entity_id] != 'page') {
+              pair_selector += '.' + settings.field_group_colorbox[pair_id][entity_id];
+            }
+
+            // Make all of our popups into colorbox objects, each of which
+            // returns an inline popup of their own children.
+            var $group = $(popup_selector + '.' + pair_selector).colorbox({
+              inline: true,
+              rel: pair_selector,
+              current: '{current} of {total}',
+              href: function(){
+                return $(this).children();
+              }
+            });
+            // Assign click behavior to the triggers.
+            // The unbind() is to prevent it from firing multiple times.
+            // The anonymous function is to create a closure, to keep access to
+            // the correct variable in the loop.
+            $(trigger_selector + '.' + pair_selector).unbind().click((function(group) {
+              return function(e){
+                e.preventDefault();
+                // Find the first popup with the same pair-id and entity-id
+                // as the trigger that was clicked, and simulate a click
+                // event on it.
+                var cls = $(this).attr('class');
+                cls = cls.replace('field-group-colorbox-trigger', 'field-group-colorbox');
+                cls = '.' + cls.replace(/ /g, '.');
+                group.filter(cls).first().click();
+              };
+            })($group));
+          }
+        }
+      }
+    }
+  };
+})(jQuery, Drupal);